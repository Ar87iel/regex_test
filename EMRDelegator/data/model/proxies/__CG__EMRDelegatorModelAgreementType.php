<?php

namespace Model\Proxies\__CG__\EMRDelegator\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class AgreementType extends \EMRDelegator\Model\AgreementType implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'agreementTypeId', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'typeKey', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'description', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'typeOrder', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'created', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'lastModified');
        }

        return array('__isInitialized__', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'agreementTypeId', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'typeKey', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'description', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'typeOrder', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'created', '' . "\0" . 'EMRDelegator\\Model\\AgreementType' . "\0" . 'lastModified');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (AgreementType $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setAgreementTypeId($agreementTypeId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAgreementTypeId', array($agreementTypeId));

        return parent::setAgreementTypeId($agreementTypeId);
    }

    /**
     * {@inheritDoc}
     */
    public function getAgreementTypeId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getAgreementTypeId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAgreementTypeId', array());

        return parent::getAgreementTypeId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeKey($typeKey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeKey', array($typeKey));

        return parent::setTypeKey($typeKey);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeKey', array());

        return parent::getTypeKey();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeOrder($typeOrder)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeOrder', array($typeOrder));

        return parent::setTypeOrder($typeOrder);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeOrder()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeOrder', array());

        return parent::getTypeOrder();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', array($created));

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated($format = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', array($format));

        return parent::getCreated($format);
    }

    /**
     * {@inheritDoc}
     */
    public function setLastModified($lastModified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastModified', array($lastModified));

        return parent::setLastModified($lastModified);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastModified($format = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastModified', array($format));

        return parent::getLastModified($format);
    }

}
